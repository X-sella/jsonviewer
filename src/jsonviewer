#!/usr/bin/env python3
import json
import sys
import os
from textual.app import App, ComposeResult
from textual.widgets import Tree

class JSONTree(App):
    """Interactive JSON tree viewer with HTML entities for symbols."""

    def __init__(self, data):
        super().__init__()
        self.data = data

    def compose(self) -> ComposeResult:
        # Tree with HTML entity expand/collapse markers
        tree = Tree("JSON", expand_symbol="&dtri;", collapse_symbol="&ltri;")
        self._build_tree(self.data, tree.root)
        yield tree

    def _build_tree(self, obj, node):
        """Recursively build the tree from a JSON object."""
        if isinstance(obj, dict):
            for key, value in obj.items():
                child = node.add(f"{key}")
                self._build_tree(value, child)
        elif isinstance(obj, list):
            for idx, value in enumerate(obj):
                child = node.add(f"[{idx}]")
                self._build_tree(value, child)
        else:
            node.add(f"&bull; {obj}")

def main():
    # Handle input: file or stdin
    if len(sys.argv) > 1:
        filename = sys.argv[1]
        if not os.path.exists(filename):
            print(f"Error: File '{filename}' not found", file=sys.stderr)
            sys.exit(1)
        with open(filename, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError as e:
                print(f"Error: Invalid JSON - {e}", file=sys.stderr)
                sys.exit(1)
    else:
        try:
            data = json.load(sys.stdin)
        except Exception:
            print("Usage: jsonviewer <file.json>", file=sys.stderr)
            sys.exit(1)

    # Run the TUI app
    app = JSONTree(data)
    app.run()

if __name__ == "__main__":
    main()